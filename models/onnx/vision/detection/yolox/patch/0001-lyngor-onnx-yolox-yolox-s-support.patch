From 6d3b6dbda65b02737a965063198bffc237b61d6a Mon Sep 17 00:00:00 2001
From: lu gao <lu.gao@lynxi.com>
Date: Tue, 19 Apr 2022 11:00:09 +0800
Subject: [PATCH] lyngor onnx::yolox::yolox-s::support

---
 .gitignore    |  6 ++++
 lyncompile.py | 14 +++++++++
 lyndetect.py  | 99 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 lynsetting.py |  1 +
 lyntest.py    | 30 ++++++++++++++++++
 5 files changed, 150 insertions(+)
 create mode 100755 lyncompile.py
 create mode 100755 lyndetect.py
 create mode 100755 lynsetting.py
 create mode 100755 lyntest.py

diff --git a/.gitignore b/.gitignore
index a09a31b..a1e2025 100644
--- a/.gitignore
+++ b/.gitignore
@@ -212,6 +212,10 @@ docs/api
 *.onnx
 *.engine
 events.out.tfevents*
+demo_output/
+build_model/
+*.bin
+*.patch
 
 # vscode
 *.code-workspace
@@ -219,3 +223,5 @@ events.out.tfevents*
 
 # vim
 .vim
+
+lynpy.py
\ No newline at end of file
diff --git a/lyncompile.py b/lyncompile.py
new file mode 100755
index 0000000..00ac120
--- /dev/null
+++ b/lyncompile.py
@@ -0,0 +1,14 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+
+import lyngor as lyn
+import lynsetting
+
+dlmodel = lyn.DLModel()
+dlmodel.load("yolox_s.onnx", model_type='ONNX',
+            inputs_dict={'images': lynsetting.LYN_INPUT})
+
+#使用 lyn.Builder()接口创建 Builder。
+builder = lyn.Builder(target='apu', is_map=True)
+#使用 builder()方法编译计算图 graph，并保存。
+builder.build(dlmodel.graph, dlmodel.params, out_path="./build_model")
\ No newline at end of file
diff --git a/lyndetect.py b/lyndetect.py
new file mode 100755
index 0000000..1e4eecd
--- /dev/null
+++ b/lyndetect.py
@@ -0,0 +1,99 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+
+import argparse
+import os
+
+import cv2
+import numpy as np
+
+from yolox.data.data_augment import preproc as preprocess
+from yolox.data.datasets import COCO_CLASSES
+from yolox.utils import mkdir, multiclass_nms, demo_postprocess, vis
+import lynpy
+import time
+from loguru import logger
+
+def make_parser():
+    parser = argparse.ArgumentParser("onnxruntime inference sample")
+    parser.add_argument(
+        "-m",
+        "--model",
+        type=str,
+        default="build_model/Net_0",
+        help="Input your lynor model.",
+    )
+    parser.add_argument(
+        "-i",
+        "--image_path",
+        type=str,
+        default='./assets/dog.jpg',
+        help="Path to your input image.",
+    )
+    parser.add_argument(
+        "-o",
+        "--output_dir",
+        type=str,
+        default='demo_output',
+        help="Path to your output directory.",
+    )
+    parser.add_argument(
+        "-s",
+        "--score_thr",
+        type=float,
+        default=0.3,
+        help="Score threshould to filter the result.",
+    )
+    parser.add_argument(
+        "--input_shape",
+        type=str,
+        default="640,640",
+        help="Specify an input shape for inference.",
+    )
+    parser.add_argument(
+        "--with_p6",
+        action="store_true",
+        help="Whether your model uses p6 in FPN/PAN.",
+    )
+    return parser
+
+
+if __name__ == '__main__':
+    args = make_parser().parse_args()
+
+    input_shape = tuple(map(int, args.input_shape.split(',')))
+    origin_img = cv2.imread(args.image_path)
+    img, ratio = preprocess(origin_img, input_shape)
+
+    lyn_model = lynpy.Model(path=args.model)
+    # Inference
+    for i in range(10):
+        t0 = time.time()
+        lyn_in = lyn_model.input_tensor().from_numpy(img).apu()
+        lyn_model(lyn_in)
+        output = lyn_model.output_list()[0][0].cpu()
+        logger.info("Infer time: {:.4f}s".format(time.time() - t0))
+
+    output = output.numpy()
+    predictions = demo_postprocess(output, input_shape, p6=args.with_p6)[0]
+    print(predictions.shape)
+    boxes = predictions[:, :4]
+    scores = predictions[:, 4:5] * predictions[:, 5:]
+
+    boxes_xyxy = np.ones_like(boxes)
+    boxes_xyxy[:, 0] = boxes[:, 0] - boxes[:, 2]/2.
+    boxes_xyxy[:, 1] = boxes[:, 1] - boxes[:, 3]/2.
+    boxes_xyxy[:, 2] = boxes[:, 0] + boxes[:, 2]/2.
+    boxes_xyxy[:, 3] = boxes[:, 1] + boxes[:, 3]/2.
+    boxes_xyxy /= ratio
+    dets = multiclass_nms(boxes_xyxy, scores, nms_thr=0.45, score_thr=0.1)
+    if dets is not None:
+        final_boxes, final_scores, final_cls_inds = dets[:, :4], dets[:, 4], dets[:, 5]
+        origin_img = vis(origin_img, final_boxes, final_scores, final_cls_inds,
+                         conf=args.score_thr, class_names=COCO_CLASSES)
+
+    mkdir(args.output_dir)
+    output_path = os.path.join(args.output_dir, os.path.basename(args.image_path))
+    cv2.imwrite(output_path, origin_img)
+    
+
diff --git a/lynsetting.py b/lynsetting.py
new file mode 100755
index 0000000..6d2c8cb
--- /dev/null
+++ b/lynsetting.py
@@ -0,0 +1 @@
+LYN_INPUT = (1, 3, 640, 640)
\ No newline at end of file
diff --git a/lyntest.py b/lyntest.py
new file mode 100755
index 0000000..64f7e42
--- /dev/null
+++ b/lyntest.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+
+import torch
+import lynsetting
+import lyngor as lyn
+import numpy as np
+import onnxruntime
+import lynpy
+
+def lyn_loss(output, lyn_output):
+    return np.sqrt(np.sum( (np.float32(lyn_output)-np.float32(output))**2 )) \
+            / np.sqrt(np.sum( np.float32(output)**2 ))
+
+input = torch.rand(lynsetting.LYN_INPUT)
+
+session = onnxruntime.InferenceSession("yolox_s.onnx")
+ort_inputs = {session.get_inputs()[0].name: input.numpy()}
+inname = [input.name for input in session.get_inputs()]
+
+output1 = session.run(None, ort_inputs)
+
+lyn_model = lynpy.Model(path='./build_model/Net_0')
+lyn_in = lyn_model.input_tensor().from_numpy(input.numpy()).apu()
+lyn_model(lyn_in)
+output2 = lyn_model.output_list()[0][0].cpu()
+print(output1[0].shape)
+print(output2.numpy().shape)
+loss = lyn_loss(output1[0], output2.numpy())
+print(f'=======loss {loss}========')
-- 
2.7.4

