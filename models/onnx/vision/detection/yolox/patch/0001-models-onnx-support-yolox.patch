From cee3cc5b7004c4689bd67146d29c84ebf1f66015 Mon Sep 17 00:00:00 2001
From: lu gao <lu.gao@lynxi.com>
Date: Fri, 22 Apr 2022 11:35:20 +0800
Subject: [PATCH] models: onnx: support yolox

---
 demo/ONNXRuntime/onnx_inference.py |  3 +-
 lyndetect.py                       | 98 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 99 insertions(+), 2 deletions(-)
 create mode 100755 lyndetect.py

diff --git a/demo/ONNXRuntime/onnx_inference.py b/demo/ONNXRuntime/onnx_inference.py
index ee164bd..1d42b16 100644
--- a/demo/ONNXRuntime/onnx_inference.py
+++ b/demo/ONNXRuntime/onnx_inference.py
@@ -67,7 +67,6 @@ if __name__ == '__main__':
     img, ratio = preprocess(origin_img, input_shape)
 
     session = onnxruntime.InferenceSession(args.model)
-
     ort_inputs = {session.get_inputs()[0].name: img[None, :, :, :]}
     output = session.run(None, ort_inputs)
     predictions = demo_postprocess(output[0], input_shape, p6=args.with_p6)[0]
@@ -89,4 +88,4 @@ if __name__ == '__main__':
 
     mkdir(args.output_dir)
     output_path = os.path.join(args.output_dir, os.path.basename(args.image_path))
-    cv2.imwrite(output_path, origin_img)
+    cv2.imwrite(output_path, origin_img)
\ No newline at end of file
diff --git a/lyndetect.py b/lyndetect.py
new file mode 100755
index 0000000..7eac7fa
--- /dev/null
+++ b/lyndetect.py
@@ -0,0 +1,98 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+
+import argparse
+import os
+
+import cv2
+import numpy as np
+
+from yolox.data.data_augment import preproc as preprocess
+from yolox.data.datasets import COCO_CLASSES
+from yolox.utils import mkdir, multiclass_nms, demo_postprocess, vis
+import lynpy
+import time
+from loguru import logger
+
+def make_parser():
+    parser = argparse.ArgumentParser("onnxruntime inference sample")
+    parser.add_argument(
+        "-m",
+        "--model",
+        type=str,
+        default="build_model/Net_0",
+        help="Input your lynor model.",
+    )
+    parser.add_argument(
+        "-i",
+        "--image_path",
+        type=str,
+        default='./assets/dog.jpg',
+        help="Path to your input image.",
+    )
+    parser.add_argument(
+        "-o",
+        "--output_dir",
+        type=str,
+        default='demo_output',
+        help="Path to your output directory.",
+    )
+    parser.add_argument(
+        "-s",
+        "--score_thr",
+        type=float,
+        default=0.3,
+        help="Score threshould to filter the result.",
+    )
+    parser.add_argument(
+        "--input_shape",
+        type=str,
+        default="640,640",
+        help="Specify an input shape for inference.",
+    )
+    parser.add_argument(
+        "--with_p6",
+        action="store_true",
+        help="Whether your model uses p6 in FPN/PAN.",
+    )
+    return parser
+
+
+if __name__ == '__main__':
+    args = make_parser().parse_args()
+
+    input_shape = tuple(map(int, args.input_shape.split(',')))
+    origin_img = cv2.imread(args.image_path)
+    img, ratio = preprocess(origin_img, input_shape)
+
+    lyn_model = lynpy.Model(path=args.model)
+    # Inference
+    for i in range(10):
+        t0 = time.time()
+        lyn_in = lyn_model.input_tensor().from_numpy(img).apu()
+        lyn_model(lyn_in)
+        output = lyn_model.output_list()[0][0].cpu()
+        logger.info("Infer time: {:.4f}s".format(time.time() - t0))
+
+    output = output.numpy()
+    predictions = demo_postprocess(output, input_shape, p6=args.with_p6)[0]
+    print(predictions.shape)
+    boxes = predictions[:, :4]
+    scores = predictions[:, 4:5] * predictions[:, 5:]
+
+    boxes_xyxy = np.ones_like(boxes)
+    boxes_xyxy[:, 0] = boxes[:, 0] - boxes[:, 2]/2.
+    boxes_xyxy[:, 1] = boxes[:, 1] - boxes[:, 3]/2.
+    boxes_xyxy[:, 2] = boxes[:, 0] + boxes[:, 2]/2.
+    boxes_xyxy[:, 3] = boxes[:, 1] + boxes[:, 3]/2.
+    boxes_xyxy /= ratio
+    dets = multiclass_nms(boxes_xyxy, scores, nms_thr=0.45, score_thr=0.1)
+    if dets is not None:
+        final_boxes, final_scores, final_cls_inds = dets[:, :4], dets[:, 4], dets[:, 5]
+        origin_img = vis(origin_img, final_boxes, final_scores, final_cls_inds,
+                         conf=args.score_thr, class_names=COCO_CLASSES)
+
+    mkdir(args.output_dir)
+    output_path = os.path.join(args.output_dir, os.path.basename(args.image_path))
+    cv2.imwrite(output_path, origin_img)
+ 
-- 
2.7.4

