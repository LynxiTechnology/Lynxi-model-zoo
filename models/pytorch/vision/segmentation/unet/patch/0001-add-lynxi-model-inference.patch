From 953964817f0f1b67d3f454f65765bf7f8ea94d54 Mon Sep 17 00:00:00 2001
From: "zhou.zhou" <zhou.zhou@lynxi.com>
Date: Thu, 3 Nov 2022 14:58:32 +0800
Subject: [PATCH] add lynxi model inference

---
 .../unet/Pytorch-UNet/predict_lynxi.py             | 130 +++++++++++++++++++++
 1 file changed, 130 insertions(+)
 create mode 100755 models/pytorch/vision/segmentation/unet/Pytorch-UNet/predict_lynxi.py

diff --git a/predict_lynxi.py b/predict_lynxi.py
new file mode 100755
index 0000000..72ee657
--- /dev/null
+++ b/predict_lynxi.py
@@ -0,0 +1,130 @@
+import argparse
+import logging
+import os
+
+import numpy as np
+import torch
+import torch.nn.functional as F
+from PIL import Image
+from torchvision import transforms
+
+from utils.data_loading import BasicDataset
+from unet import UNet
+from utils.utils import plot_img_and_mask
+
+import lynpy         
+lyn_model = lynpy.Model(path="../convert_out/Net_0", dev_id=0)
+# def compare_result(apu_x, torch_y, flag):
+#     import numpy as np
+#     ret  = np.sqrt( np.sum( (np.float32(apu_x)-np.float32(torch_y))**2)) / np.sqrt( np.sum( np.float32(apu_x)**2 ))
+#     print(f'[compart_result][{flag}] the error value of apu_x and torch_y is: {ret}') 
+#     print('---'*30)
+#     return ret
+
+
+def predict_img(net,
+                full_img,
+                device,
+                scale_factor=1,
+                out_threshold=0.5):
+    net.eval()
+    img = torch.from_numpy(BasicDataset.preprocess(full_img, scale_factor, is_mask=False))
+    img = img.unsqueeze(0)
+    img = img.to(device=device, dtype=torch.float32)
+
+    with torch.no_grad():
+        # output = net(img)                          # pytorch inference
+        input_data = img.numpy().transpose(0,2,3,1).astype("float16")
+        input_ = lyn_model.input_tensor().from_numpy(input_data).apu()
+        lyn_model(input_)
+        apu = lyn_model.output_list()[0][0].cpu().numpy()
+        # compare_result(apu, output, "test_apu")
+        output = torch.from_numpy(apu).float()         # use apu result 
+
+        if net.n_classes > 1:
+            probs = F.softmax(output, dim=1)[0]
+        else:
+            probs = torch.sigmoid(output)[0]
+
+        tf = transforms.Compose([
+            transforms.ToPILImage(),
+            transforms.Resize((full_img.size[1], full_img.size[0])),
+            transforms.ToTensor()
+        ])
+
+        full_mask = tf(probs.cpu()).squeeze()
+
+    if net.n_classes == 1:
+        return (full_mask > out_threshold).numpy()
+    else:
+        return F.one_hot(full_mask.argmax(dim=0), net.n_classes).permute(2, 0, 1).numpy()
+
+
+def get_args():
+    parser = argparse.ArgumentParser(description='Predict masks from input images')
+    parser.add_argument('--model', '-m', default='MODEL.pth', metavar='FILE',
+                        help='Specify the file in which the model is stored')
+    parser.add_argument('--input', '-i', metavar='INPUT', nargs='+', help='Filenames of input images', required=True)
+    parser.add_argument('--output', '-o', metavar='INPUT', nargs='+', help='Filenames of output images')
+    parser.add_argument('--viz', '-v', action='store_true',
+                        help='Visualize the images as they are processed')
+    parser.add_argument('--no-save', '-n', action='store_true', help='Do not save the output masks')
+    parser.add_argument('--mask-threshold', '-t', type=float, default=0.5,
+                        help='Minimum probability value to consider a mask pixel white')
+    parser.add_argument('--scale', '-s', type=float, default=0.5,
+                        help='Scale factor for the input images')
+    parser.add_argument('--bilinear', action='store_true', default=False, help='Use bilinear upsampling')
+
+    return parser.parse_args()
+
+
+def get_output_filenames(args):
+    def _generate_name(fn):
+        split = os.path.splitext(fn)
+        return f'{split[0]}_OUT{split[1]}'
+
+    return args.output or list(map(_generate_name, args.input))
+
+
+def mask_to_image(mask: np.ndarray):
+    if mask.ndim == 2:
+        return Image.fromarray((mask * 255).astype(np.uint8))
+    elif mask.ndim == 3:
+        return Image.fromarray((np.argmax(mask, axis=0) * 255 / mask.shape[0]).astype(np.uint8))
+
+
+if __name__ == '__main__':
+    args = get_args()
+    in_files = args.input
+    out_files = get_output_filenames(args)
+
+    net = UNet(n_channels=3, n_classes=2, bilinear=args.bilinear)
+
+    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
+    logging.info(f'Loading model {args.model}')
+    logging.info(f'Using device {device}')
+
+    net.to(device=device)
+    net.load_state_dict(torch.load(args.model, map_location=device))
+
+    logging.info('Model loaded!')
+
+    for i, filename in enumerate(in_files):
+        logging.info(f'\nPredicting image {filename} ...')
+        img = Image.open(filename)
+
+        mask = predict_img(net=net,
+                           full_img=img,
+                           scale_factor=args.scale,
+                           out_threshold=args.mask_threshold,
+                           device=device)
+
+        if not args.no_save:
+            out_filename = out_files[i]
+            result = mask_to_image(mask)
+            result.save(out_filename)
+            logging.info(f'Mask saved to {out_filename}')
+
+        if args.viz:
+            logging.info(f'Visualizing results for image {filename}, close to continue...')
+            plot_img_and_mask(img, mask)
-- 
2.7.4

