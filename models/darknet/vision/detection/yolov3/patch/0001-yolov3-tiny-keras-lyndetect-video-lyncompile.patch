From 262221d33efc0538630ea6c24760470b2ce8d1f7 Mon Sep 17 00:00:00 2001
From: lu gao <lu.gao@lynxi.com>
Date: Tue, 14 Jun 2022 10:41:54 +0800
Subject: [PATCH] yolov3-tiny keras lyndetect video lyncompile

---
 lyncompile.py |  23 ++++++++++
 lyndetect.py  | 141 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 yolo.py       |  17 ++++---
 yolo_video.py |  20 ++++++---
 4 files changed, 189 insertions(+), 12 deletions(-)
 create mode 100644 lyncompile.py
 create mode 100755 lyndetect.py

diff --git a/lyncompile.py b/lyncompile.py
new file mode 100644
index 0000000..2d101f9
--- /dev/null
+++ b/lyncompile.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+
+import argparse
+import lyngor as lyn
+
+def make_parser():
+    parser = argparse.ArgumentParser("yolov3 compile parser")
+    parser.add_argument("-m", "--model_path", type=str, default="../yolov3-tiny.h5", help="model path")
+    parser.add_argument("-o", "--output_path", type=str, default="../convert_out", help="model output path")
+    parser.add_argument("-i", "--input_shape", type=str, default="1, 416, 416, 3", help="model input shape")
+    
+    return parser
+    
+if __name__ == "__main__":
+    args = make_parser().parse_args()
+    #compile
+    dlmodel = lyn.DLModel()
+    input_shape = tuple(map(int, args.input_shape.split(",")))
+    dlmodel.load(args.model_path, model_type='Keras', inputs_dict={'input_1': input_shape})
+    builder = lyn.Builder(target='apu', is_map=True)
+    #使用 builder()方法编译计算图 graph，并保存。
+    builder.build(dlmodel.graph, dlmodel.params, out_path=args.output_path)
\ No newline at end of file
diff --git a/lyndetect.py b/lyndetect.py
new file mode 100755
index 0000000..e78e906
--- /dev/null
+++ b/lyndetect.py
@@ -0,0 +1,141 @@
+import os,sys
+import numpy as np
+from PIL import Image, ImageFont, ImageDraw
+from numpy.random import rand
+from yolo3.utils import letterbox_image
+from PIL import Image
+import colorsys
+from yolo3.model import yolo_eval
+from keras import backend as K
+import lynpy
+import argparse
+import matplotlib.font_manager as fm
+
+def make_parser():
+    parser = argparse.ArgumentParser("inference sample")
+    parser.add_argument(
+        "-m",
+        "--model",
+        type=str,
+        default="../convert_out/Net_0",
+        help="Input your lynor model.",
+    )
+    parser.add_argument(
+        "-i",
+        "--image_path",
+        type=str,
+        default='../images/bus.jpg',
+        help="Path to your input image.",
+    )
+    parser.add_argument(
+        "-o",
+        "--output_dir",
+        type=str,
+        default='../demo_output',
+        help="Path to your output directory.",
+    )
+    parser.add_argument(
+        "-a",
+        "--anchors",
+        type=str,
+        default='model_data/tiny_yolo_anchors.txt',
+        help="path to anchor definitions.",
+    )
+    parser.add_argument(
+        "--input_shape",
+        type=str,
+        default='416, 416',
+        help="Specify an input shape for inference.",
+    )
+    parser.add_argument(
+        "-c",
+        "--classes_path",
+        type=str,
+        default='model_data/coco_classes.txt',
+        help="path to classes definitions.",
+    )
+    
+    return parser
+
+def get_anchors(anchors_path):
+        anchors_path = os.path.expanduser(anchors_path)
+        with open(anchors_path) as f:
+            anchors = f.readline()
+        anchors = [float(x) for x in anchors.split(',')]
+        return np.array(anchors).reshape(-1, 2)
+
+def _get_class(classes_path):
+        classes_path = os.path.expanduser(classes_path)
+        with open(classes_path) as f:
+            class_names = f.readlines()
+        class_names = [c.strip() for c in class_names]
+        return class_names
+
+def run_lyn_inference():
+    lyn_model = lynpy.Model(path=args.model)
+    lyn_in = lyn_model.input_tensor().from_numpy(image_data).apu()
+    lyn_model(lyn_in)
+    output0,output1 = lyn_model.output_list()[0]
+    output0 = output0.cpu().numpy()
+    output1 = output1.cpu().numpy()
+    outputs = [K.constant(output0),K.constant(output1)]
+
+    return outputs
+
+if __name__ == '__main__':
+    args = make_parser().parse_args()
+    image = Image.open(args.image_path)
+    ll = args.input_shape.split(',')
+    boxed_image = letterbox_image(image, tuple(reversed(tuple(map(int, ll)))))
+    image_data = np.array(boxed_image, dtype='float32')
+    image_data /= 255.
+    image_data = np.expand_dims(image_data, 0)
+    #inference
+    outputs = run_lyn_inference()
+
+    anchors = get_anchors(args.anchors)
+    class_names = _get_class(args.classes_path)
+    input_image_shape = (image.size[1],image.size[0])
+
+    out_boxes, out_scores, out_classes = yolo_eval(outputs, anchors, len(class_names), input_image_shape, score_threshold=.3,
+              iou_threshold=.45)
+    hsv_tuples = [(x / len(class_names), 1., 1.)
+                      for x in range(len(class_names))]
+    
+    fontsize = np.floor(3e-2 * image.size[1] + 0.5).astype('int32')
+    font = ImageFont.truetype(fm.findfont(fm.FontProperties(family='DejaVu Sans')),fontsize)
+    thickness = (image.size[0] + image.size[1]) // 300
+    colors = list(map(lambda x: colorsys.hsv_to_rgb(*x), hsv_tuples))
+    colors = list(map(lambda x: (int(x[0] * 255), int(x[1] * 255), int(x[2] * 255)),
+                    colors))
+    out_boxes, out_scores, out_classes= K.eval(out_boxes), K.eval(out_scores), K.eval(out_classes)
+    for i, c in reversed(list(enumerate(out_classes))):
+        predicted_class = class_names[c]
+        box = out_boxes[i]
+        score = out_scores[i]
+        label = '{} {:.2f}'.format(predicted_class, score)
+        draw = ImageDraw.Draw(image)
+        label_size = draw.textsize(label, font)
+
+        top, left, bottom, right = box
+        top = max(0, np.floor(top + 0.5).astype('int32'))
+        left = max(0, np.floor(left + 0.5).astype('int32'))
+        bottom = min(image.size[1], np.floor(bottom + 0.5).astype('int32'))
+        right = min(image.size[0], np.floor(right + 0.5).astype('int32'))
+        print(label, (left, top), (right, bottom))
+
+        if top - label_size[1] >= 0:
+            text_origin = np.array([left, top - label_size[1]])
+        else:
+            text_origin = np.array([left, top + 1])
+
+        for i in range(thickness):
+            draw.rectangle(
+                [left + i, top + i, right - i, bottom - i],
+                outline=colors[c])
+        draw.rectangle(
+            [tuple(text_origin), tuple(text_origin + label_size)],
+            fill=colors[c])
+        draw.text(text_origin, label, fill=(0, 0, 0), font=font)
+        del draw
+    image.save(os.path.join(args.output_dir,"test.jpg"))
\ No newline at end of file
diff --git a/yolo.py b/yolo.py
index 4aa3486..2558823 100644
--- a/yolo.py
+++ b/yolo.py
@@ -6,6 +6,7 @@ Class definition of YOLO_v3 style detection model on image and video
 import colorsys
 import os
 from timeit import default_timer as timer
+import matplotlib.font_manager as fm
 
 import numpy as np
 from keras import backend as K
@@ -112,7 +113,6 @@ class YOLO(object):
             boxed_image = letterbox_image(image, new_image_size)
         image_data = np.array(boxed_image, dtype='float32')
 
-        print(image_data.shape)
         image_data /= 255.
         image_data = np.expand_dims(image_data, 0)  # Add batch dimension.
 
@@ -126,10 +126,12 @@ class YOLO(object):
 
         print('Found {} boxes for {}'.format(len(out_boxes), 'img'))
 
-        font = ImageFont.truetype(font='font/FiraMono-Medium.otf',
-                    size=np.floor(3e-2 * image.size[1] + 0.5).astype('int32'))
+        # font = ImageFont.truetype(font='font/FiraMono-Medium.otf',
+        #             size=np.floor(3e-2 * image.size[1] + 0.5).astype('int32'))
+        fontsize = 30
+        font = ImageFont.truetype(fm.findfont(fm.FontProperties(family='DejaVu Sans')),fontsize)
         thickness = (image.size[0] + image.size[1]) // 300
-
+       
         for i, c in reversed(list(enumerate(out_classes))):
             predicted_class = self.class_names[c]
             box = out_boxes[i]
@@ -161,7 +163,9 @@ class YOLO(object):
                 fill=self.colors[c])
             draw.text(text_origin, label, fill=(0, 0, 0), font=font)
             del draw
-
+        
+        jpgname=self.input_image_path[self.input_image_path.rfind("/")+1:]
+        image.save(os.path.join(self.output_image_path,jpgname))
         end = timer()
         print(end - start)
         return image
@@ -208,5 +212,4 @@ def detect_video(yolo, video_path, output_path=""):
             out.write(result)
         if cv2.waitKey(1) & 0xFF == ord('q'):
             break
-    yolo.close_session()
-
+    yolo.close_session()
\ No newline at end of file
diff --git a/yolo_video.py b/yolo_video.py
index 7c39461..b5a1b3b 100644
--- a/yolo_video.py
+++ b/yolo_video.py
@@ -5,14 +5,14 @@ from PIL import Image
 
 def detect_img(yolo):
     while True:
-        img = input('Input image filename:')
         try:
-            image = Image.open(img)
+            image = Image.open(FLAGS.input_image_path)
         except:
             print('Open Error! Try again!')
             continue
         else:
             r_image = yolo.detect_image(image)
+            if FLAGS.image == True:break
             r_image.show()
     yolo.close_session()
 
@@ -25,17 +25,17 @@ if __name__ == '__main__':
     Command line options
     '''
     parser.add_argument(
-        '--model', type=str,
+        '--model_path', type=str,
         help='path to model weight file, default ' + YOLO.get_defaults("model_path")
     )
 
     parser.add_argument(
-        '--anchors', type=str,
+        '--anchors_path', type=str,
         help='path to anchor definitions, default ' + YOLO.get_defaults("anchors_path")
     )
 
     parser.add_argument(
-        '--classes', type=str,
+        '--classes_path', type=str,
         help='path to class definitions, default ' + YOLO.get_defaults("classes_path")
     )
 
@@ -61,6 +61,16 @@ if __name__ == '__main__':
         help = "[Optional] Video output path"
     )
 
+    parser.add_argument(
+        '--input_image_path', type=str, required=True, default='../images/bus.jpg',
+        help='input image path'
+    )
+
+    parser.add_argument(
+        '--output_image_path', type=str, required=True, default='../golden',
+        help='output image path'
+    )
+
     FLAGS = parser.parse_args()
 
     if FLAGS.image:
-- 
2.7.4

