From 857cebd0300a453a1b496d64c0dc3dafc06aee08 Mon Sep 17 00:00:00 2001
From: "zhou.zhou" <zhou.zhou@lynxi.com>
Date: Fri, 4 Nov 2022 18:16:13 +0800
Subject: [PATCH] fix bug and fp16 abc

---
 eval_image.py     |  4 +--
 eval_image_lyn.py | 74 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 76 insertions(+), 2 deletions(-)
 create mode 100755 eval_image_lyn.py

diff --git a/eval_image.py b/eval_image.py
index c93e91c..703c2f2 100755
--- a/eval_image.py
+++ b/eval_image.py
@@ -32,10 +32,10 @@ def eval():
     im = caffe.io.load_image(args.image)
     h, w, _ = im.shape
     if h < w:
-        off = (w - h) / 2
+        off = int((w - h) / 2)
         im = im[:, off:off + h]
     else:
-        off = (h - w) / 2
+        off = int((w - h) / 2)
         im = im[off:off + h, :]
     im = caffe.io.resize_image(im, [nh, nw])
 
diff --git a/eval_image_lyn.py b/eval_image_lyn.py
new file mode 100755
index 0000000..92a7a8b
--- /dev/null
+++ b/eval_image_lyn.py
@@ -0,0 +1,74 @@
+from __future__ import print_function
+import argparse
+import numpy as np
+import caffe
+
+import lynpy
+# load model --------------
+lyn_model = lynpy.Model(path="../convert_out/Net_0", dev_id=0)   ###
+
+def parse_args():
+    parser = argparse.ArgumentParser(
+        description='evaluate pretrained mobilenet models')
+    parser.add_argument('--proto', dest='proto',
+                        help="path to deploy prototxt.", type=str)
+    parser.add_argument('--model', dest='model',
+                        help='path to pretrained weights', type=str)
+    parser.add_argument('--image', dest='image',
+                        help='path to color image', type=str)
+
+    args = parser.parse_args()
+    return args, parser
+
+
+global args, parser
+args, parser = parse_args()
+
+
+def eval():
+    nh, nw = 224, 224
+    img_mean = np.array([103.94, 116.78, 123.68], dtype=np.float32)
+
+    # caffe.set_mode_cpu()
+    # net = caffe.Net(args.proto, args.model, caffe.TEST)
+
+    im = caffe.io.load_image(args.image)
+    h, w, _ = im.shape
+    if h < w:
+        off = int((w - h) / 2)
+        im = im[:, off:off + h]
+    else:
+        off = int((h - w) / 2)
+        im = im[off:off + h, :]
+    im = caffe.io.resize_image(im, [nh, nw])
+    
+    # transformer = caffe.io.Transformer({'data': net.blobs['data'].data.shape})
+    transformer = caffe.io.Transformer({'data': (1,3,224,224)})
+    transformer.set_transpose('data', (2, 0, 1))  # row to col
+    transformer.set_channel_swap('data', (2, 1, 0))  # RGB to BGR
+    transformer.set_raw_scale('data', 255)  # [0,1] to [0,255]
+    transformer.set_mean('data', img_mean)
+    transformer.set_input_scale('data', 0.017)
+
+    # net.blobs['data'].reshape(1, 3, nh, nw)
+    # net.blobs['data'].data[...] = transformer.preprocess('data', im)
+    # out = net.forward()
+    # prob = out['prob']
+    input_data = transformer.preprocess('data', im).transpose(1,2,0).astype("float16")    # inference -----------------
+    input_ = lyn_model.input_tensor().from_numpy(input_data).apu()
+    lyn_model(input_)
+    apu = lyn_model.output_list()[0][0].cpu()
+    prob = apu.numpy()
+
+    prob = np.squeeze(prob)
+    idx = np.argsort(-prob)
+
+    label_names = np.loadtxt('synset.txt', str, delimiter='\t')
+    for i in range(5):
+        label = idx[i]
+        print('%.2f - %s' % (prob[label], label_names[label]))
+    return
+
+
+if __name__ == '__main__':
+    eval()
-- 
2.7.4

